// 다이나믹
// 프로그래밍에서 다이나믹은 '프로그램이 실행되는 도중에'라는 의미이다.
// 예를 들어 자료 구조에서 동적 할당(Dynamic Allocation)은 프로그램 실행 중에 프로그램 실행에 필요한 메모리를 할당하는 기법이다.
// 하지만 다이나믹 프로그래밍에서 '다이나믹'은 이것과는 다른 의미이다.

// 다이나믹 프로그래밍을 사용할 수 있는 조건
// 1) 큰 문제를 작은 문제로 나눌 수 있다.
// 2) 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

// 메모이제이션(Memoization) or 캐싱(Caching)
// 메모이제이션은 다이나믹 프로그래밍 기법의 한 종류이다.
// 메모이제이션은 한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 호출하면 메모한 결과를 그대로 가져오는 기법이다.

// 다이나믹 프로그래밍
// 다이나믹 프로그래밍이란 큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법이다.

// 분할 정복(Divide and Conquer) 알고리즘
// 큰 문제를 작게 나누는 정렬 방법 -> 퀵 정렬
// 퀵 정렬은 정렬을 수행할 때 정렬할 리스트를 분할하며 전체적으로 정렬이 될 수 있도록 하는 분할 정복 알고리즘이다.
// 다이나믹 프로그래밍과 분할 정복 알고리즘의 차이점은 다이나믹 프로그래밍은 문제들이 서로 영향을 미치고 있다는 점이다.
// 퀵 정렬에서는 한 번 자리가 정해진 원소는 다시 자리를 바꾸지 않는다.
// 반면에 메모이제이션에서는 이미 해결한 적이 있는 문제는 다시 해결할 필요 없이 저장된 값을 반환하는 것이다.
// 물론 재귀 함수를 사용하면 컴퓨터 시스템에서는 함수를 다시 호출했을 때 메모리 상에 적재되는 일련의 과정을 따라야 하므로 오버헤드가 발생할 수 있다.
// 따라서 재귀 함수 대신에 반복문을 사용하여 오버헤드를 줄일 수 있다.
// 일반적으로 다이나믹 프로그래밍을 구현할 때 반복문이 재귀 함수보다 더 성능이 좋다.
//

// 오버헤드(Overhead)
// 오버헤드란 프로그램의 실행흐름에서 나타나는 현상중 하나로 프로그램의 실행흐름 도중에 동떨어진 위치의 코드를 실행시켜야 할 때,
// 추가적으로 시간, 메모리, 자원이 사용되는 현상입니다.
// 한마디로 정의하자면, 오버 헤드는 특정 기능을 수행하는데 드는 간접적인 시간, 메모리 등 자원을 말한다.
// 예를들어, 10초 걸리는 기능이 간접적인 원인으로 20초걸린다면 오버헤드는 10초가 되는것이다.
