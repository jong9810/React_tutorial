// - 테스트 시나리오(Test Scenario, TS)
// 주로 설계나 개발단계에서 개발자나 테스터가 작성하는 문서다.
// 상세 테스트 케이스를 위해서 반드시 작성해야 하는 문서로 모든 기능의 '무엇'을 테스트 할지 적는다.

// - 테스트 케이스(Test Case, TC)
// 상위 모듈의 역할을 하는 가상의 모듈로서 테스트할 모듈을 호출하는 역할을 한다.
// 즉, 필요한 데이터를 인자를 통해 넘겨주고 테스트가 완료된 후 그 결과값을 받는 역할을 한다.
// 테스트 케이스는 주로 개발이나 테스팅 단계에서 테스터가 작성한다(상황에 따라 개발자가 작성해야 하는 경우도 있음).
// 각 테스트 시나리오에 속하는 모든 기능을 테스트 시나리오별로 나누어 '어떻게' 테스트할지 상세하게 기록한다.
// 테스트 케이스를 보고 각 기능을 '어떻게 구동' 하는지에 대한 테스트 스텝을 따로 작성하는 곳도 있고, 없는 곳도 있다.
// 테스트 스텝은 주로 테스트 케이스 안에 작성하는 경우가 많다.
// 구현된 소프트웨어가 사용자의 요구 사항을 정확하게 준수했는지를 확인하기 위해
// 설계된 입력값, 실행 조건, 기대 결과 등으로 구성된 테스트 항목에 대한 명세서를 의미한다.
// 테스트의 목표 및 테스트 방법을 결정하고 테스트 케이스를 작성해야 한다.

// - 테스트 오라클(Test Oracle) : 테스트 실행 결과의 참/거짓 판별 기준

// - 테스트 스텁(Test Stub)
// 테스트 완료 후 그 결과값을 받는 역할을 하는 가상 모듈.
// 상위 모듈에서 하위 모듈로의 테스트를 진행하는 하향식 테스트에서 사용한다.
// 서버-클라이언트 구조에서 서버만 구현된 상태로 테스트를 해보고 싶을 경우,
// 단순히 값만 넘겨주는(뼈대만 있는) 가상의 클라이언트를 만들어서 테스트 할 수 있다.
// 이 가상의 클라이언트가 바로 스텁이다.

// - 회귀 테스트(Regression Test)
// 이미 테스트된 프로그램의 테스팅을 반복하는 것이다.
// 결함 수정 이후 변경의 결과로 새롭게 만들어 지거나, 이전 결함으로 인해 발견되지 않았던 또 다른 결함을 발견하는 테스트

// - 클러스터(Cluster)
// 하나의 주요 제어 모듈과 관련된 종속 모듈의 그룹을 의미한다.

// - 드라이버(Driver)
// 하위 모듈에서 상위 모듈로의 테스트를 진행하는 상향식 테스트에서 사용한다.
// 서버-클라이언트 구조에서 이번엔 클라이언트만 구현된 상태로 테스트를 해보고 싶을 경우,
// 접속 인증 등의 간단한 기능만 하는(뼈대만 있는) 가상의 서버를 만들어서 테스트 할 수 있다.
// 이 가상의 서버가 바로 드라이버이다.

// - 정적 테스트 : 소프트웨어를 실행하지 않고 요구사항 정의서, 설계서, 소스 코드 등의 개발 산출물을 테스팅하는 것
// - 동적 테스트 : 실제 구현된 시스템(프로그램)을 실행하여 테스팅하는 것

// - 통합 테스트(Integration Test)
// 시스템을 구성하는 모듈의 인터페이스와 결함을 테스트하는 것.
// 애플리케이션의 모든 구성 요소가 예상대로 함께 작동하는지 확인하는 소프트웨어 테스트 유형입니다.
// 통합 테스트의 목적은 응용 프로그램의 다양한 모듈과 구성 요소의 통합이 조직의 기술 및 성능 요구 사항은 물론
// 사용자의 요구 사항을 충족하는지 여부를 확인하는 것입니다.
// 모듈 간의 인터페이스와 시스템의 동작이 정상적으로 잘 되고 있는지를 빨리 파악하고자할 때 상향식보다는 하향식 통합 테스트를 사용하는 것이 좋다.

// (1) 하향식 통합 테스트(Top-Down Integration Test)
// 상위 모듈에서 하위 모듈 방향으로 통합하면서 테스트하는 기법이다.
// 깊이 우선 통합법, 넓이 우선 통합법 사용한다.
// 테스트 초기부터 사용자에게 시스템 구조를 보여줄 수 있다.
// 상위 모듈에서는 tc를 사용하기 어렵다.
// - 하향식 통합 테스트 절차
// 1) 주요 제어 모듈은 작성된 프로그램을 사용하고, 주요 제어 모듈의 종속 모듈들은 스텁(Stub)으로 대체한다.
// 2) 깊이 우선 or 넓이 우선 등의 통합 방식에 따라, 하위 모듈인 스텁들이 한 번에 하나씩 실제 모듈로 교체된다.
// 3) 모듈이 통합될 때마다 테스트를 실시한다.
// 4) 새로운 오류가 발생하지 않음을 보증하기 위해 회귀 테스트를 실시한다.

// (2) 상향식 통합 테스트(Bottom-Up Integration Test)
// 하위 모듈에서 상위 모듈 방향으로 통합하면서 테스트하는 방법이다.
// 가장 하위 단계의 모듈부터 통합 및 테스트가 수행되므로 스텁은 필요하지 않다.
// 하나의 주요 제어 모듈과 관련된 종속 모듈의 그룹인 클러스터(Cluster)가 필요하다.
// -상향식 통합 테스트 절차
// 1) 하위 모듈을 클러스터로 결합한다.
// 2) 상위 모듈에서 데이터의 입출력을 확인하기 위한 모듈인 드라이버를 작성한다.
// 3) 통합된 클러스터 단위로 테스트를 수행한다.
// 4) 테스트가 완료되면 클러스터는 프로그램 구조의 상위로 이동하여 결합하고, 드라이버는 실제 모듈로 대체된다.

// (3) 화이트박스 테스트(White-box Test)
// 소프트웨어 또는 컴포넌트 등의 로직에 대한 테스트를 수행하기 위해 설계 단계에서 요구된 사항을 확인하는 개발자 관점의 단위테스팅 기법
// 화이트박스 테스트의 이해를 위해 논리흐름도(Logic-Flow Diagram)를 이용할 수 있다.
// 테스트 데이터를 이용해 실제 프로그램을 실행함으로써 오류를 찾는 동적 테스트(Dynamic Test)에 해당한다.
// 테스트 데이터를 선택하기 위해 검증기준(Test Coverage)을 정한다.

// (4) 블랙박스 테스트(Black-box Test)
// 소프트웨어의 내부 구조나 작동 원리를 모르는 상태에서 소프트웨어의 동작을 검사하는 방법
// 프로그램의 구조를 고려하지 않기 때문에 테스트 케이스는 프로그램 또는 모듈의 요구나 명세를 기초로 결정한다.

// - 단위 테스트(Unit Test)
//
// 구현 단계에서 각 모듈의 개발을 완료한 후 개발자가 명세서의 내용대로 정확히 구현되었는지 테스트한다.
// 모듈 내부의 구조를 구체적으로 볼 수 있는 구조적 테스트를 주로 시행한다.
// 필요 데이터를 인자를 통해 넘겨주고, 테스트 완료 후 그 결과값을 받는 역할을 하는 가상의 모듈을 테스트 드라이버(Driver)이라고 한다.
// 테스트할 모듈을 호출하는 모듈도 있고, 테스트할 모듈이 호출하는 모듈도 있다.
// - 단위 테스트 도구
// - CppUnit : C++ 프로그래밍 언어용 단위 테스트 도구
// - JUnit : 자바 프로그래밍 언어용 단위 테스트 도구
// - HttpUnit : 웹 브라우저 없이 웹 사이트 테스트를 수행하는 데 사용되는 오픈 소스 소프트웨어 테스트 프레임워크
