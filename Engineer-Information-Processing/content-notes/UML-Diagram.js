// - 유스케이스(Use case) (표기 : 동그라미 안에 내용)
// 시스템의 하나 이상의 액터 또는 이해관계자에게 관측가능한 결과를 산출하는, 시스템에 의해 수행되는 일련의 활동의 명세.
// 행위자(actor)가 관심을 가지고 있는 유용한 일을 달성하기 위한 시나리오의 집합을 명시한다.
// 사용자 입장에서 바라본 시스템의 특성을 설명한 구조로서, 행위자, 시간의 흐름, 또는 시스템에 의해 개시되는 시나리오 집합의 형태를 갖추고 있다.

// - 액터(actor) (표기 : 졸라맨 아래 액터 이름)
// 시스템과 상호작용하는 모든 것(사람, 기계, 시스템 등)
// 시스템의 외부에 있고 시스템과 상호작용을 하는 사람(시스템의 기능을 사용하는 사람) 또는 시스템(시스템에 정보를 제공하는 또 다른 시스템)

// - DFD(데이터 흐름도) : 프로세스나 시스템의 정보 흐름을 나타내는 도표.

// - DD(데이터 사전) : 프로그래머의 편의를 위해 데이터 모델 내의 데이터 객체들이나 항목들의 설명을 모아놓은 것.

// - UML 다이어그램(Unified Modeling Language Diagram)
// 통합 모델링 언어. 시스템을 모델로 표현해주는 대표적인 모델링 언어.
// 통합 모델링 언어를 사용하여 시스템 상호작용, 업무 흐름, 시스템 구조, 컴포넌스 관계 등을 그린 도면이다.
// 프로그래밍을 단순화시켜 표현하며 의사소통하기 좋고 또 대규모 프로젝트 구조의 로드맵을 만들거나 개발을 위한 시스템 구축에 기본을 마련한다.

// - UML 특징
// 통합적 : 방법론을 기반으로 한 표준화된 기법 제공
// 시각적 : 풍부한 시각적 표현 모델 제공
// 독립적 : 시스템의 종류나 규모에 관계 없이 적용 가능

// - UML 구성요소
// 사물(Things) : 구조, 행위, 그룹, 주석 등
// 관계(Relationships) : 의존 관계, 연관 관계, 일반화 관계 등
// 다이어그램(Diagrams) : 객체 다이어그램, 클래스 다이어그램, 시퀀스 다이어그램 등

// - UML 다이어그램 분류
// 정적(구조) 다이어그램 : 클래스, 객체, 패키지, 컴포넌트, 복합구조, 배치
// 동적(행위) 다이어그램 : 유스케이스, 상태, 활동, 시퀀스, 통신, 상호작용, 타이밍

// - UML 다이어그램 종류
// - 정적 다이어그램
// 1) 클래스 다이어그램(Class Diagram)
// 객체를 생성하기 위한 도구.
// 클래스의 속성, 함수, 변수타입들로 구성된 다이어그램.
// 2) 객체 다이어그램(Object Diagram)
// 객체 간의 연결관계를 표현.
// 클래스의 인스턴스, 값이 매겨진 행동을 가지고 있는 독립된 객체 정보를 표현하는 다이어그램.
// 3) 패키지 다이어그램(Package Diagram)
// 객체들을 그룹화하여 표현.
// UML의 다양한 모델 요소를 그룹화한 다이어그램.
// 4) 컴포넌트 다이어그램(Component Diagram)
// 시스템을 구성하는 컴포넌트 사이에 의존관계를 표현.
// 컴포넌트 간의 구조 관계를 표현한 다이어그램.
// 5) 복합체 구조 다이어그램(Complex Structure Diagram)
// 컴포넌트나 클래스의 내부 구조를 보여주기 위해 사용(내부 연결 형태를 표현).
// 6) 배치 다이어그램(Deployment Diagram)
// H/W 자원에 연결된 S/W 컴포넌트 배치를 표현.
// 소프트웨어, 하드웨어 등을 포함한 시스템의 물리적인 구조를 나타내는 다이어그램.

// - 동적 다이어그램
// (1) 유스케이스(쓰임새) 다이어그램(Use Case Diagram)
// 사용자의 시각에서 소프트웨어의 범위와 기능을 표현.
//   - Use case 관계
//     1) 연관 관계(Association) (표기 : ㅡ)
//     유스 케이스와 액터 간의 상호작용이 있음을 표현
//     2) 포함 관계(Include) (표기 : --->)
//     하나의 유스케이스가 다른 유스케이스의 실행을 전제로 할 때 형성되는 관계
//     3) 확장 관계(Extend) (표기 : --->)
//     확장 기능 유스케이스와 확장 대상 유스케이스 사이에 형성되는 관계
//     4) 일반화 관계(Generalization) (표기 : ㅡ▷)
//     유사한 유스케이스 또는 액터를 모아 추상화한 유스케이스 또는 액터와 연결시켜 그룹을 만들어 이해도를 높이기 위한 관계
// (2) 상태 다이어그램(State Transition Diagram)
// 시간에 따라 객체가 변하는 상태를 표현.
// (3) 활동 다이어그램(Activity Diagram)
// 객체의 동적 행위를 활동으로 표현.
// (4) 시퀀스(순차) 다이어그램(Sequence Diagram)
// 객체간 상호작용을 시간 순서에 따른 메시지로 표현.
// 객체 간의 동적 상호작용을 시간 개념을 중심으로 모델링하는 다이어그램이다.
// 일반적으로 다이어그램의 수직 방향이 시간의 흐름을 나타낸다.
// 회귀 메시지(Self-message), 제어 블록(Statement-block) 등으로 구성된다.
// 주로 시스템의 동적 측면을 모델링하기 위해 사용한다.
// (5) 통신(커뮤니케이션) 다이어그램(Communication Diagram)
// 갹채간 상호작용을 관계 형태의 메시지로 표현.
// (6) 상호작용 다이어그램
// 객체들의 상호작용 관계를 표현.

// - UML 다이어그램 관계 표현
// 1) 연관 관계(ㅡ>)
// 객체 간의 개념적인 연관이 있는 경우
// 2) 의존 관계(--->)
// 객체 변경 시 관계된 다른 객체도 변경되는 경우
// 3) 집합 관계(ㅡ◇)
// 전체와 부분인 연관 관계
// 4) 포함 관계(ㅡ◆)
// 전체 소멸시 부분도 소멸되는 집합 연관 관계
// 5) 일반화 관계(ㅡ▷)
// 일반화된 개념과 구체화된 객체의 관계
// 6) 실체화 관계(---▷)
// 인터페이스와 그것을 실체로 구현한 객체의 관계
