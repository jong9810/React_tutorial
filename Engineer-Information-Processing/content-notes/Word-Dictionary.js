// IT 용어 사전

// - Refactoring :결과의 변경 없이 코드의 구조를 재조정함

// - Architecting : 기능면에서 바라본 본 구성 방식. 구조, 밑그림(설계 관련)

// - Specification(규격, 사양) : 명세서

// - Renewal(갱신) : 유지보수

// - DRM
// 출판자 또는 저작권자가 그들이 배포한 디지털 자료나 하드웨어의 사용을 제어하고 이를 의도한 용도로만 사용하도록 제한하는 데 사용되는 모든 기술들을 지칭하는 용어

// - 클리어링 하우스
// 디지털 저작권 라이선싱을 중개하고 라이선스 발급을 수행하는 정산소로서 라이센서(licensor)와 라이센시(licensee)가 아닌 제3의 운영주체가 운영한다.

// - 정보은닉(or 은닉성) : 다른 객체에게 자신의 정보를 숨기고 자신의 연산만을 통해 접근을 허용하는 것으로, 클래스 외부에서 특정 정보에 접근을 막는다는 의미

// - 복호화 : 디코딩, 즉 부호화된 데이터를 부호화되기 전 형태로 바꾸어 사람이 읽을 수 있는 형태로 되돌려 놓은 것

// - 형상관리 : 소프트웨어의 개발과정에서 소프트웨어의 변경사항을 관리하기 위해 개발된 일련의 활동

// - 저작권 : 창작물을 만든 이가 자신의 저작물에 대해 가지는 법적 권리

// - 크랙 : 소프트웨어를 수정하여 개발자가 원하지 않는 기능들, 보통은 수정 방식(복사 보호, 소프트웨어 조작 보호)을 비활성화하거나 제거하는 일

// - 액터 : 시스템과 상호작용하는 모든 것(사람, 기계, 시스템 등)

// - 유스케이스
// 행위자(actor)가 관심을 가지고 있는 유용한 일을 달성하기 위한 시나리오의 집합을 명시한다.
// 사용자 입장에서 바라본 시스템의 특성을 설명한 구조로서, 행위자, 시간의 흐름, 또는 시스템에 의해 개시되는 시나리오 집합의 형태를 갖추고 있다.

// - DFD(데이터 흐름도) : 프로세스나 시스템의 정보 흐름을 나타내는 도표.

// - DD(데이터 사전) : 프로그래머의 편의를 위해 데이터 모델 내의 데이터 객체들이나 항목들의 설명을 모아놓은 것.

// - UML 표기법 : 시스템을 모델로 표현해주는 대표적인 모델링 언어.

// - 컴포넌트(Component)
// 명백한 역할을 가지고 독립적으로 존재할 수 있는 시스템의 부분으로 넓은 의미에서는 재사용되는 모든 단위라고 볼 수 있으며,
// 인터페이스를 통해서만 접근할 수 있는 것.
// 프로그래밍에 있어 재사용이 가능한 각각의 독립된 모듈.
// 특정 기능수행을 위해 독립적으로 분리.

// - 인터페이스 : 서로 다른 두 시스템이나 소프트웨어 등을 이어주는 부분 또는 접속 장치를 의미

// - 기능적 요구사항
// 시스템이 실제로 어떻게 동작하는지에 관점을 둔 요구사항

// - 비기능적 요구사항
// 시스템 구축에 대한 성능, 보안, 품질, 안정성 등으로 실제 수행에 보조적인 요구사항

// - 워크스루(Walk-through) : 요구사항 명세서 작성자를 포함하여 사전 검토한 후에 짧은 검토 회의를 통해 결함을 발견.

// - 인스펙션(Inspection) : 요구사항 명세서 작성자를 제외한 다른 검토 전문가들이 요구사항 명세서를 확인하면서 결함을 발견.

// - 정적 테스트 : 소프트웨어를 실행하지 않고 요구사항 정의서, 설계서, 소스 코드 등의 개발 산출물을 테스팅하는 것

// - 동적 테스트 : 실제 구현된 시스템(프로그램)을 실행하여 테스팅하는 것

// - 화이트박스 테스트 : 소프트웨어 또는 컴포넌트 등의 로직에 대한 테스트를 수행하기 위해 설계 단계에서 요구된 사항을 확인하는 개발자 관점의 단위테스팅 기법

// - 블랙박스 테스트 : 소프트웨어의 내부 구조나 작동 원리를 모르는 상태에서 소프트웨어의 동작을 검사하는 방법

// - 컴파일(Compile)
// 주어진 언어로 작성된 컴퓨터 프로그램을 다른 언어의 동등한 프로그램으로 변환하는 기능
// 고급언어(사람이 인식하는 언어)를 저급언어(기계어)로 변환하는 기능이다.

// - 코딩(Coding)
// 프로그래밍 언어를 가지고 컴퓨터 프로그램을 작성할 수 있는 환경을 제공

// - 디버깅(Debugging)
// 프로그램에서 발견되는 버그를 찾아 수정할 수 있는 기능

// - 배포(Deployment)
// 소프트웨어를 최종 사용자에게 전달하기 위한 기능

// - JSON(JavaScript Object Notation)
// 속성-값 쌍으로 이루어진 데이터 오브젝트를 전달하기 위해 사용하는 개방형 표준 포맷이다.
// AJAX(Asynchronous Javascript And Xml)에서 많이 사용되고 XML을 대체하는 주요 데이터 포맷이다.
// 언어 독립형 데이터 포맷으로 다양한 프로그래밍 언어에서 사용되고 있다.

// - AJAX(Asynchronous Javascript And Xml) (asynchronous : 비동기적인)
// Ajax는 빠르게 동작하는 동적인 웹 페이지를 만들기 위한 개발 기법의 하나이다.
// Ajax는 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있다.
// 즉, Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만 표시할 수 있다.

// - 스택(Stack) : LIFO(Last-In-First-Out), 데이터의 삽입과 삭제가 한 쪽 끝에서 일어남.

// - 큐(Queue) : FIFO(First-In-First-Out), 데이터의 삽입과 삭제가 양방향에서 일어남.

// - Tree & Graph : 비선형 구조
