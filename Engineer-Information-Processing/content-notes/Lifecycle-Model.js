// - 소프트웨어 생명주기 모델(Software Development Life Cycle, SDLC)
// 소프트웨어를 기획부터 개발, 폐기까지를 하나의 주기로 보고 이를 효과적을 관리하기 위한 절차를 정의한 것.
// 소프트웨어 개발방법론과 겹치는 부분이 많지만 생명주기 모델은 좀 더 프로세스 관리에 초점을 맞추고 있다고 생각하면 된다.

// - 생명주기 모델 종류
// (1) 폭포수 모델(Waterfall)
// 분석, 설계, 개발, 테스트의 전 과정을 순차적으로 접근하는 방식이다.
// 분석 단계를 마무리하고 설계 단계로 들어가고 설계 단계를 마무리하고 개발 단계로 들어가게 된다.
// 프로젝트에서 많이 진행하는 착수 보고회, 설계 보고회 같은 경우가 각 단계를 마무리하고 고객에게 설명하는 자리이다.
// 폭포수 모델은 전체 과정이 이해가 쉽고 관리가 편리하다는 장점이 있지만,
// 초기에 완벽한 요구사항 정의가 어렵기 때문에 프로젝트 후반부로 갈수록 문제가 많아지는 단점이 있다.
// (2) 프로토타이핑 모델(Prototyping)
// 초기에 고객의 요구사항을 확정하기 어려운 상황에서 많이 사용된다.
// 동작하는 테스트 프로그램(프로토타입)을 먼저 개발해 고객 요구사항을 구체적으로 도출하거나 프로젝트 타당성을 평가하는 개발 방식이다.
// 고객 요구사항을 정확하게 분석할 수 있는 장점이 있지만, 프로토타입 폐기에 따른 비용문제가 발생할 수 있다.
// (3) 나선형 모델(Spiral)
// 핵심 요구사항을 먼저 도출한 다음 위험분석을 수행 후 프로그램을 개발하고 고객 평가를 반영해 프로그램을 개선하는 방식으로 진행하는 점진적, 반복적 모델이다.
// 주기적으로 위험분석을 수행하고 분석, 설계, 개발의 모든 과정을 반복적으로 수행하기 때문에 위험 부담이 적은 장점이 있지만,
// 같은 단계를 반복하기 때문에 공정관리에 어려움이 있다는 단점이 있다.
// (4) 반복적 모델(Iteration)
// 개발해야 할 소프트웨어를 여러 개(증분: Incremental)로 나누고 증분을 반복적으로 개발해 나가면서 완성한다.
// 나중에 증분 전체를 하나로 통합해 소프트웨어를 완성하는 방식이다.
// 폭포수 모델의 변형적인 방법으로 전체를 증분으로 나누어 병행 개발이 가능하다는 장점이 있지만, 병행 개발에 따른 프로젝트 관리가 어렵다는 단점이 있다.
// (5) V 모델
// https://ko.wikipedia.org/wiki/V_%EB%AA%A8%EB%8D%B8
// 개발 작업과 검증 작업 사이의 관계를 명확히 드러내 놓은 폭포수 모델의 변형이라고 볼 수 있다.
// 아래 방향으로 선형적으로 내려가면서 진행되는 폭포수 모델과 달리,
// 이 프로세스는 코딩 단계에서 위쪽으로 꺾여서 알파벳 V자 모양으로 진행된다.
// 폭포수 모델이 산출물 중심이라면 V 모델은 작업과 결과의 검증에 초점을 둔다.
// Perry에 의해 제안되었으며 세부적인 테스트 과정으로 구성되어 신뢰도 높은 시스템을 개발하는 데 효과적이다.
// V 모델은 소프트웨어 개발의 각 단계마다 상세한 문서화를 통해 작업을 진행하는 잘 짜인 방법을 사용한다.
// 또한 테스트 설계와 같은 테스트 활동을 코딩 이후가 아닌 프로젝트 시작 시에 함께 시작하여, 전체적으로 많은 양의 프로젝트 비용과 시간을 감소시킨다.
// - V 모델 검증(Verification) 단계
// 1) 요구사항 분석
// 2) 시스템 설계
// 3) 아키텍처 설계
// 4) 모듈 설계
