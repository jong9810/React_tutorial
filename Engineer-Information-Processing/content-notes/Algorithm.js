// 알고리즘(Algorithm)
// 주어진 작업을 수행하는 컴퓨터 명령어를 순서대로 나열한 것으로 볼 수 있다.

// - 검색(Searching)
// 정렬이 되지 않은 데이터 혹은 정렬이 된 데이터 중에서 키값에 해당되는 데이터를 찾는 알고리즘이다.

// - 선형 검색(or 순차 탐색)
// 처음부터 끝까지 하나씩 순서대로 비교하며 원하는 값을 찾아내는 검색

// - 이진 탐색
// 이진 탐색은 검색을 수행하기 전에 반드시 데이터의 집합이 정렬되어 있어야 한다.
// - 이진 탐색 동작 방식
// 1) 배열의 중간 값을 찾음.
// 2) 중간 값과 검색 값을 비교
// 2-1) 중간 값이 검색 값과 같으면 끝
// 2-2) 중간 값이 검색 값보다 작으면 오른쪽 구간을 탐색
// 2-3) 중간 값이 검색 값보다 크면 왼쪽 구간을 탐색
// 3) 값을 찾거나 간격이 비었을 때까지 반복

// - 이진 나무 순회(Tree Traverse)
//
// - 이진 나무 순회 용어
// 1) path : edge에 의해 연결된 node들의 집합
// 2) root node : 최상위의 node
// 3) parent(부모), children(자식), sibling(형제), grandparent(조부모), ancestor(조상)
// 기준이 되는 것의 바로 직계 상위 node를 부모, 바로 아래층의 node를 자식, 같은 부모를 둔 node들을 형제, 부모의 부모를 조부모, 직계 상위 노드들은 조상
// 4) leaf(잎) : 자식이 없는 node
// 5) subtree(하위 나무) : 큰 tree에 속한 작은 tree
// 6) node의 degree : 특정 node의 subtree 개수
// 7) node의 level : root node 부터 최하위 node까지의 중첩되지 않은 path의 node 개수
// - 이진 나무 순회 종류
// 1) 전위 순회(Pre-order Traverse)
// 뿌리(Root)를 먼저 방문 == Root, Left, Right 순서
// 2) 중위 순회(In-order Traverse)
// 왼쪽 하위 트리를 방문 후 뿌리(Root)를 방문 == Left, Root, Right 순서
// 3) 후위 순회(Post-order Traverse)
// 하위 트리 모두 방문 후 뿌리(Root)를 방문 == Left, Right, Root 순서
// 4) 층별 순회(Lever-order Traverse)
// 위 쪽 node들부터 아래 방향으로 차례로 방문 == node의 순서대로

// - 정렬(Sorting)
// 흩어져있는 데이터를 키값을 이용하여 순서대로 열거하는 알고리즘이다.
// https://roytravel.tistory.com/328

// - 정렬 종류
// 1) 버블 정렬(Bubble Sorting)
// 첫번째 원소부터 마지막 원소까지 순서대로 바로 오른쪽 원소와 값을 비교해가면서 데이터를 정렬하는 기법이다.
// 왼쪽에서 부터 두 데이터를 비교해서 앞에 있는 데이터가 뒤에 있는 데이터 보다 크면 자리를 바꾸는 정렬 알고리즘.
// 정렬 시간 복잡도 항상 O(n^2)이다.
// pass 1 : 첫 버블의 정렬이 끝난 상태
// <예시> 9, 6, 7, 3, 5 오름차순 버블 정렬 pass 1
// 9와 6을 비교 -> 69735 -> 9와 7을 비교 -> 67935 -> 9와 3을 비교 -> 67395 -> 9와 5를 비교 -> 67359
// 2) 선택 정렬(Selection Sort)
// 배열 내에서 최소값을 찾은 다음 정렬 되지 않은 맨 앞 값과 교환을 하며 정렬을 해 나아가는 방법.
// 정렬 시간 복잡도는 항상 O(n^2)이다.
// 3) 삽입 정렬(Insert Sort)
// 한 개의 값을 추출한 다음 앞쪽으로 비교해서 본인의 자리를 알맞게 찾아가게끔 하는 정렬 방법.
// 정렬 시간 복잡도는 최상일 경우 O(n), 평균과 최악일 경우 O(n^2)
// 4) 병합(합병) 정렬
// 또한 분할 정복에 기반한 알고리즘으로 리스트를 1 이하인 상태까지 절반으로 자른 다음
// 재귀적으로 합병 정렬을 이용해서 전체적인 리스트를 합병하는 정렬 과정.
// 시간 복잡도는 O(n log n)
