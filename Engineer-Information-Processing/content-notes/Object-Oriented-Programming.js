// 객체지향 프로그래밍(Object-Oriented Programming)
// 실세계에 존재하고 인지하고 있는 객체(Object)를 소프트웨어의 세계에서 표현하기 위해
// 객체의 핵심적인 개념 또는 기능만을 추출하는 추상화(abstraction)를 통해 모델링하려는 프로그래밍 패러다임을 말한다.

// - 객체지향의 주요 개념(원칙)
// 1) 캡슐화(Encapsulation)
// 데이터(변수)와 데이터를 처리하는 함수(연산)를 하나로 묶은 것.
// 캡슐화된 객체의 세부 내용이 은폐되어 변경이 발생해도 오류의 파급효과가 적음.
// 캡슐화된 객체들은 재사용이 용이함.
// 인터페이스가 단순해지고 객체간의 결합도가 낮아짐.
// 2) 상속성(Inheritance)
// 객체지향 프로그래밍에서 이미 정의된 상위 클래스(부모, 슈퍼 클래스)의 모든 속성과 연산을 하위 클래스(자식, 서브 클래스)가 상속(물려)받는 것.
// 하위 클래스는 상위 클래스로부터 받은 속성과 연산 외에도 새로운 것을 첨가 가능.
// 클래스의 재사용, 소프트웨어의 재사용을 높이는 중요한 개념.
// 3) 다형성(Polymorphism)
// 하나의 메시지에 대해 각 객체가 갖고 있는 고유한 방법대로 응답하는 것을 의미.
// 하나의 클래스나 메서드가 다양한 방식으로 동작이 가능한 것을 의미.
// 오버로딩과 오버라이딩이 존재.
// 4) 추상화(Abstraction)
// 공통의 속성이나 기능을 묶어 이름을 붙이는 것.
// 객체지향적 관점에서 클래스를 정의하는 것이 추상화에 해당한다.
// 예를 들어, 물고기, 사자, 토끼, 뱀이라는 객체가 있을 때, 동물이라는 클래스 안에 객체들을 정의하는 것을 추상화라고 한다.

// - 오버로딩(Overloading)
// 같은 이름의 메서드를 여러 개 정의하여 매개변수의 유형과 개수를 다르도록 하는 기술.
// 무엇을 오버로딩 하는지에 따라 메소드 오버로딩과 생성자 오버로딩이 있는데, 둘 다 개념은 같다.
//

// - 오버라이딩(Overriding)
// 상위 클래스가 가지고 있는 메서드를 하위 클래스가 재정의해서 사용하는 기술.
// 쉽게 말해, 메서드의 이름이 서로 같고, 매개변수가 같고, 반환형이 같을 경우에 상속받은 메서드를 덮어쓰는 것이다.
// '부모 클래스의 메서드는 무시하고, 자식 클래스의 메서드 기능을 사용하겠다.'라는 의미이다.
