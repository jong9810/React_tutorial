// - 프로젝트 산정
// 프로젝트 수행에 필요한 규모(Size), 공수(Effort), 비용(Cost) 등을 정량적으로 예측하는 것
// - 프로젝트 산정 방법
// 1) 경험적 방법 : 델파이 기법
// 2) 크기 중심 방법 : LOC, COCOMO
// 3) 기능 중심 방법 : 기능점수(FP)로 측정

// - 하향식 비용 산정 기법
// 과거의 유사한 경험을 바탕으로 전문 지식이 많은 개발자들이 참여한 회의를 통해 비용을 산정하는 비과학적인 방법.
// 프로젝트 전체 비용을 산정한 후 각 작업별로 비용을 세분화한다.
// 하향식 비용 산정 기법에는 전문가 감정 기법, 델파이 기법 등이 있다.

// - 상향식 비용 산정 기법
// 프로젝트의 세부적인 작업 단위별로 비용을 산정한 수 집계하여 전체 비용을 산정하는 방법.
// 상향식 비용 산정 기법에는 LOC 기법, 개발 단계별 인월(man-month) 수 기법, 수학적 산정 기법 등이 있다.

// - Delphi(델파이) 기법
// 경험적 산정, 전문가들의 의견이나 판단을 종합하여 예측
// - 델파이 기법 절차
// 1) 전문가 의견 개진(동일한 질문지로)
// 2) 설문결과 취합
// 3) 설문조사 결과 상호 공유(자신의 견해 수정)
//    필요한 경우 다시 1) 단계로 돌아간다.
// 4) 결과 도출

// - LOC(Lines Of Code, 원시 코드 라인 수) 기법
// 프로그램의 라인 수를 평가하여 비용을 산정하는 방법.
// 즉, 소프트웨어의 각 기능의 LOC의 비관치, 낙관치, 기대치를 측정하여 예측치를 구하고, 이것으로 비용을 산정하는 방법.
// - LOC 기법 수식
// 예측치 = {낙관치 + (4 * 기대치) + 비관치} / 6
// 개발기간 = 노력(인월) / 투입인원
// 개발비용 = 노력(인월) * 단위비용
// 노력(인월) = 개발기간 * 투입인원 = LOC / (1인당 월 평균 생산 코드 라인 수)
// 생산성 = LOC / 노력(인월)
// - LOC 기법 절차
// 1) 전체 프로그램을 모듈별로 분할한다.
// 2) 모듈별로 규모를 추정, 계산한다(경험을 토대로).
//    추정 LOC(예측치) = {낙관치 + (4 * 기대치) + 비관치} / 6
// 3) 경헙적 데이터를 이용한 개발 비용 및 개발 노력을 추정, 계산한다.
//    프로젝트 비용 = 총 LOC * LOC당 비용(경험적 데이터)
//    개발 노력 = 총 LOC / 생산성(man-month)

// - COCOMO(COnstructive COst MOdel) 모형
// 보헴(Boehm)이 제안한 원시 프로그램의 규모에 의한 비용예측 모형.
// 소프트웨어의 종류에 따라 다르게 책정되는 비용산정 방정식을 이용한다.
// 같은 규모의 프로그램이라도 그 성격에 따라 비용이 다르게 산정된다.
// 비용 견적의 강도 분석 및 비용 견적의 유연성이 높아 소프트웨어 개발비 견적에 널리 통용되고 있다.
// 비용 산정 결과는 프로젝트를 완성하는 데에 필요한 노력(man-month)으로 나타낸다.
// 개발할 소프트웨어의 규모(LOC)를 예측한 후, 이를 소프트웨어 종류에 따라 다르게 책정되는 비용 산정 방정식(공식)에 대입하여 비용을 산정한다.
// - COCOMO 구분
// 1) 조직형(Organic Mode)
// 조직형은 기관 내부에서 개발된 중, 소규모의 소프트웨어로 일괄 자료처리나 과학 기술 계산용, 비즈니스 자료처리용으로
// 5만(50KDSI, KDSI : Kilo Delivered Source Instruction)라인 이하의 소프트웨어를 개발하는 유형이다.
// 2) 반분리형(Semi-Detached Mode)
// 반분리형은 조직형과 내장형의 중간형으로 트랜잭션 처리 시스템이나 운영체제, 데이터베이스 관리 시스템 등의
// 30만(300KDSI)라인 이하의 소프트웨어를 개발하는 유형이다.
// 3) 내장형(Embedded Mode)
// 내장형은 최대형 규모의 트랜잭션 처리 시스템이나 운영체제 등의 30만(300KDSI)라인 이상의 소프트웨어를 개발하는 유형이다.
// 신호기 제어 시스템, 미사일 유도 시스템, 실시간 처리 시스템 등의 시스템 프로그램 개발에 적합하다.
// - COCOMO 종류
// COCOMO는 비용 산정 단계 및 적용 변수의 구체화 정도에 따라 기본형, 중간형, 발전형으로 구분할 수 있다.
// 1) 기본(Basic)형 COCOMO
// 소프트웨어의 크기(생산 코드 라인 수)와 개발 유형(모드)만을 이용하여 비용을 산정하는 모형이다.
// 2) 중간(Intermediate)형 COCOMO
// 기본형 COCOMO의 공식을 토대로 사용하나, 여러가지 다른 요인에 의해 비요을 산정하는 모형이다.
// 3) 발전(Detailed)형 COCOMO
// 중간형 COCOMO를 보완하여 만들어진 방법으로, 개발 공정별로 보다 자세하고 정확하게 노력을 산출하여 비용을 산정하는 모형이다.
// - COCOMO 예시
// COCOMO의 비용 산정에 의해 개발에 소요되는 노력이 40PM(Programmer-Month)으로 계산되었고,
// 개발에 소요되는 기간이 5개월, 1인당 인건비가 100만원이라면 이 프로젝트에 소요되는 총 인건비는?
// 인적비용 = PM * 1인당 월평균 급여 = 4천만원

// - Putnam 모형
// 소프트웨어 생명주기의 전 과정 동안에 사용될 노력의 분포를 가정해주는 모형.
// Putnam이 제안한 모형으로 생명주기 예측 모형이라고도 한다.
// 시간에 따른 함수로 표현되는 Rayleigh-Norden 곡선의 노력 분포도를 기초로 한다.
// - SLIM(Software LIfecycle Management)
// Putnam 예측 모델과 Rayleigh-Norden 곡선을 기초로 하여 개발된 자동화 추정 도구

// - 기능 점수(Function Point, FP) 모형
// Albrecht가 제안한 것으로, 소프트웨어의 기능을 증대시키는 요인별로 가중치를 부여하고, 요인별로 가중치를 합산하여 총 기능 점수를 산출한다.
// 총 기능 점수와 영향도를 이용하여 기능 점수(FP)를 구한 후, 이를 이용하여 비용을 산정하는 기법이다.
