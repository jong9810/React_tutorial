// 2022년 03월 정보처리기사 필기
//-------------------------------------------------------------------------------------------------------------------------------------------------

// 소프트웨어 설계

// 1. UI 설계 시 오류 메시지나 경고에 관한 지침
// (1) 메시지는 이해하기 쉬워야 한다. - 직관성
// (2) 오류로부터 회복을 위한 구체적인 설명이 제공되어야 한다. - 유효성
// (3) 오류로 인해 발생될 수 있는 부정적인 내용을 적극적으로 사용자들에게 알려야 한다. - 학습성
// (X) 소리나 색의 사용을 줄이고 텍스트로만 전달하도록 한다.

// 2. 애자일(Agile) 소프트웨어 개발에 대한 설명
// (1) 공정과 도구보다 개인과의 상호작용을 더 가치 있게 여긴다.
// (X) 동작하는 소프트웨어보다는 포괄적인 문서를 가치 있게 여긴다. -> 포괄적인 문서보다는 동작하는 소프트웨어를 가치 있게 여긴다.
// (3) 계약 협상보다는 고객과의 협력을 가치 있게 여긴다.
// (4) 계획을 따르기보다 변화에 대응하기를 가치 있게 여긴다.

// 3. 소프트웨어 설계에서 요구사항 분석에 대한 설명
// (1) 소프트웨어가 무엇을 해야하는가를 추적하여 요구사항 명세를 작성하는 작업이다.
// (2) 사용자의 요구를 추출하여 목표를 정하고 어떤 방식으로 해결할 것인지 결정하는 단계이다.
// (X) 소프트웨어 시스템이 사용되는 동안 발견되는 오류를 정리하는 단계이다.
// (4) 소프트웨어 개발의 출발점이면서 실질적인 첫 번째 단계이다.
// <해설>
// - 요구사항 분석 프로세스
// (요구사항)도출 -> (요구사항)분석 -> (요구사항)명세 -> (요구사항)확인

// 4. 객체지향 기법에서 상위 클래스의 메소드와 속성을 하위 클래스가 물려받는 것
// (X) Abstraction - 추상화
// (X) Polymorphism - 다형성
// (X) Encapsulation - 캡슐화
// (4) Inheritance - 상속
// <해설>
// - Object-Oriented-Programming.js 참고

// 5. 설계 기법 중 하향식 설계 방법과 상향식 설계 방법에 대한 비교 설명
// (1) 하향식 설계에서는 통합 검사 시 인터페이스가 이미 정의되어 있어 통합이 간단하다.
// (2) 하향식 설계에서 레벨이 낮은 데이터 구조의 세부 사항은 설계 초기 단계에서 필요하다.
// (3) 상향식 설계는 최하위 수준에서 각각의 모듈들을 설계하고 이러한 모듈이 완성되면 이들을 결합하여 검사한다.
// (X) 상향식 설계에서는 인터페이스가 이미 성립되어 있지 않더라도 기능 추가가 쉽다.
// <해설>
// - TopDown-BottomUp.js 참고

// 6. 자료 흐름도(DFD, Data Flow Diagram)의 각 요소별 표기 형태
// (1) Process : 원
// (2) Data Flow : 화살표
// (X) Data Store : 삼각형 -> 평행선
// (4) Terminator : 사각형
// <해설>
// - Data-Flow-Diagram.js 참고

// 7. 소프트웨어 개발에 이용되는 모델(Model)에 대한 설명
// (1) 모델은 개발 대상을 추상화하고 기호나 그림 등으로 시각적으로 표현한다.
// (2) 모델을 통해 소프트웨어에 대한 이해도를 향상시킬 수 있다.
// (3) 모델을 통해 이해 당사자 간의 의사소통이 향상된다.
// (X) 모델을 통해 향후 개발될 시스템의 유추는 불가능하다. -> 유추가 가능하다.
// <해설>
// - 소프트웨어 개발시 모델은 향후 개발될 시스템을 유추하기 위해서 하는 활동이며, 주로 시스템 개발자가 수행한다.

// 8. 다음의 설명에 해당하는 언어는?
// - 객체지향 시스템을 개발할 때 산출물을 명세화, 시각화, 문서화하는 데 사용된다.
//   즉, 개발하는 시스템을 이해하기 쉬운 형태로 표현하여 분석가, 의뢰인, 설계자가 효율적인 의사소통을 할 수 있게 해준다.
//   따라서, 개발 방법론이나 개발 프로세스가 아니라 표준화된 모델링 언어이다.
// (X) JAVA
// (X) C
// (3) UML(Unified Modeling Language)
// (X) Python

// 9. 다음 내용이 설명하는 UI설계 도구는?
// - 디자인, 사용방법설명, 평가 등을 위해 실제 화면과 유사하게 만든 정적인 형태의 모형
// - 시각적으로만 구성 요소를 배치하는 것으로 일반적으로 실제로 구현되지는 않음
// (X) 스토리보드(Storyboard)
// (2) 목업(Mockup)
// (X) 프로토타입(Prototype)
// (X) 유스케이스(Use-case)
// <해설>
// - 스토리보드(Storyboard)
// 디자이너와 개발자가 최종적으로 참고하는 작업 지침서
// 상단이나 우측에 제목, 작성자 등을 입력하고 좌측에는 UI 화면, 우측엔 디스크립션(설명)을 기입한다.
// - 목업(Mockup)
// 제품 디자인 평가를 위하여 만들어지는 실물 크기의 정적 모형.
// IT분야의 경우 실제 양산품을 만들기 전에 디자인만을 구현한 것을 가리킨다.
// - 프로토타입(Prototype)
// 와이어프레임이나 스토리보드 등에 인터랙션을 적용함으로써 실제 구현된 것처럼 테스트가 가능한 동적인 형태의 모형.
// - 유스케이스(Use-case)
// 사용자 측면에서의 요구사항으로, 사용자가 원하는 목표를 달성하기 위해 수행할 내용을 기술한다.

// 10. 애자일(Agile) 기법 중 스크럼(Scrum)과 관련된 용어에 대한 설명
// (1) 스크럼 마스터(Scrum Master)는 스크럼 프로세스를 따르고, 팀이 스크럼을 효과적으로 활용할 수 있도록 보장하는 역할 등을 맡는다.
// (2) 제품 백로그(Product Backlog)는 스크럼 팀이 해결해야 하는 목록으로 소프트웨어 요구사항, 아키텍처 정의 등이 포함될 수 있다.
// (X) 스프린트(Sprint)는 하나의 완성된 최종 결과물을 만들기 위한 주기로 3달 이상의 장기간으로 결정된다.
// (4) 속도(Velocity)는 한 번의 스프린트에서 한 팀이 어느 정도의 제품 백로그를 감당할 수 있는지에 대한 추정치로 볼 수 있다.
// <해설>
// - 스프린트
// 실제 개발을 2 ~ 4주간 진행하는 과정
// 스프린트 백로그에 작성된 Task를 대상으로 작업 시간을 측정한 후 담당 개발자에게 할당한다.
// Task는 해야할 일, 진행 중인 일, 완료된 일의 상태로 구성된다.
// - Agile-Methodology.js 참고

// 11. UML 다이어그램 중 정적 다이어그램
// (1) 컴포넌트 다이어그램
// (2) 배치 다이어그램
// (3) 순차 다이어그램
// (4) 패키지 다이어그램
// <해설>
// - UML-Diagram.js 참고

// 12. LOC 기법
// <내용 정리>
// - Project-Estimate-Method.js 참고

// 13. 클래스 설계 원칙
// (X) 단일 책임원칙 : 하나의 클래스만 변경 가능해야 한다.
// (2) 개방-폐쇄의 원칙 : 클래스는 확장에 대해 열려 있어야 하며 변경에 대해 닫혀 있어야 한다.
// (X) 리스코프 교체의 원칙 : 여러 개의 책임을 가진 클래스는 하나의 책임을 가진 클래스로 대체되어야 한다.
// (X) 의존관계 역전의 원칙 : 클라이언트는 자신이 사용하는 메소드와 의존관계를 갖지 않도록 해야 한다.
// <해설>
// - Object-Oriented-Programming.js 참고

// 14. GoF(Gangs of Four) 디자인 패턴에서 생성(Creation) 패턴
// (X) 컴퍼지트(Composite) - 구조 패턴
// (X) 어댑터(Adapter) - 구조 패턴
// (X) 추상 팩토리(Abstract Factory) - 생성 패턴
// (X) 옵저버(Observer) - 행위 패턴
// <해설>
// - Design-Pattern.js

// 15. 아키텍처의 설계 과정
// <해설>
// - 설계 목표 설정 -> 시스템 타입 결정 -> 아키텍처 패턴 적용 -> 서브시스템 구체화 -> 검토

// 16. 사용자 인터페이스를 설계할 경우 고려해야할 가이드라인
// (X) 심미성을 사용성보다 우선하여 설계해야 한다. -> 심미성이 아니라 사용성이 최우선으로 고려되어야 한다.
// (2) 효율성을 높이게 설계해야 한다.
// (3) 발생하는 오류를 쉽게 수정할 수 있어야 한다.
// (4) 사용자에게 피드백을 제공해야 한다.
// <해설>
// - User-Interface.js 참고

// 17. 소프트웨어 설계에서 자주 발생하는 문제에 대한 일반적이고 반복적인 해결 방법
// (X) 모듈 분해
// (2) 디자인 패턴
// (X) 연관 관계
// (X) 클래스 도출
// <해설>
// - 디자인 패턴 : 객체지향 프로그래밍 설계를 할 때, 자주 발생하는 문제들을 피하기 위해 사용되는 패턴.

//  18. 객체지향 분석기법의 하나로 객체 모형, 동적 모형, 기능 모형의 3개 모형을 생성하는 방법은?
// (X) Wrifs-Block Method
// (X) Rumbaugh Method
// (X) Booch Method
// (X) Jacobson Method
// <해설>
// - Object-Oriented-Programming.js 참고

// 19. 입력되는 데이터를 컴퓨터의 프로세스가 처리하기 전에
// 미리 처리하여 프로세서가 처리하는 시간을 줄여주는 프로그램이나 하드웨어를 말하는 것은?
// (X) EAI
// (X) FEP
// (X) GPL
// (X) Duplexing
// <해설>
// - EAI(Enterprise Application Integration)
// 기업 응용 프로그램을 통합, 기업용 응용 프로그램의 구조적 통합 방안을 가리킨다.
// - FEP(Front-End Processor)
// 입력되는 데이터를 컴퓨터의 프로세서가 처리하기 전에 미리 처리하여 프로세서가 차지하는 시간을 줄여주는 프로그램이나 하드웨어
// - GPL(General Public License)
// 자유 소프트웨어 재단(Free Software Foundation, FSF)에서 만든 자유 소프트웨어 라이선스
// - Duplexing(이중화)
// 이중화(데이터베이스의 회복 기법 중 가장 간단한 방법).

// 20. 객체지향 개념 중 하나 이상의 유사한 객체들을 묶어 공통된 특성을 표현한 데이터 추상화를 의미하는 것은?
// (X) Method
// (2) Class
// (X) Field
// (X) Message
// <해설>
// - Object-Oriented-Programming.js 참고
// - Method(메서드)
// 클래스로부터 생성된 객체를 사용하는 방법.
// 객체가 메시지(명령)를 받아 실행해야 할 구체적인 연산.
// - Message(메시지)
// 객체 간 상호작용을 하기 위한 수단.
// 객체에게 어떤 행위를 하도록 지시하는 방법.
// - Class(클래스)
// 특정 객체 내에 있는 변수와 메서드를 정의하는 일종의 틀.
// 객체지향 프로그래밍에서 데이터를 추상화하는 단위이다.
// - Field(필드)
// SQL에서 열 또는 속성이라고 불리는 것.

//-------------------------------------------------------------------------------------------------------------------------------------------------

// 소프트웨어 개발

// 21.

//-------------------------------------------------------------------------------------------------------------------------------------------------

// 데이터베이스 구축

// 41.

//-------------------------------------------------------------------------------------------------------------------------------------------------

// 프로그래밍 언어 활용

// 61.

//-------------------------------------------------------------------------------------------------------------------------------------------------

// 정보시스템 구축관리

// 81.

//-------------------------------------------------------------------------------------------------------------------------------------------------
