// - 스케줄링(Scheduling) : 일반적으로 처리할 일들의 진행순서를 정하는 일을 의미한다.
// 1) 프로세스 스케줄링 : CPU를 사용하려고 하는 프로세스들 사이의 우선 순위를 관리하는 일
// 2) 디스크 스케줄링 : 디스크를 사용하려고 하는 프로세서들 사이의 우선 순위를 관리하는 일

// - 호위 효과
// 앞선 프로세스가 실행시간이 길다면 실행시간이 짧은 프로세스들이 실행되지 못해 마치 부하처럼 뒤따라서 기다리고 있다는 것을 가리키는 효과이다.
// 만약 사람 3명이 화장실에 들어가려고 하는데 2명은 소변을, 1명은 대변을 누기를 희망한다고 가정해보자.
// 만약 대변을 누고싶은 사람이 가장 먼저 들어가면 2명의 사람은 매우 오랫동안 소변을 참아야한다. 우리는 이 것이 매우 비효율적이라는 것을 알 수 있다.

// - 문맥 전환의 오버헤드
//

// - 대화식 시분할 시스템
//

// - 일괄 처리 시스템
//

//

// - 스케줄링 기법 구분
// 1) 선점 스케줄링 방식
// 하나의 프로세스가 CPU를 할당 받아 실행하고 있을 때 우선 순위가 높은 다른 프로세스가 CPU를 강제로 빼앗아 사용할 수 있는 기법이다.
// 모든 프로세스에게 CPU 사용시간을 동일하게 부여할 수 있으며, 빠른 응답시간을 요하는 대화식 시분할 시스템에 적합하고 긴급한 프로세서를 제어가능하다.
// 2) 비선점 스케줄링 방식
// 이미 할당된 CPU를 다른 프로세스가 강제로 빼앗아 사용할 수 없는 스케줄링 기법이다.
// 즉, 한 프로세스가 수행 중이라면 그 프로세스가 종료되기 전까지 CPU는 반드시 그 프로세스만 실행 할 수 있는 스케줄링 기법이다.
// 선점 스케줄링 방식보다 스케줄러 호출 빈도가 낮고 문맥 교환에 의한 오버헤드도 적다.
// 일괄처리 시스템에 적합하고, CPU 사용시간이 긴 하나의 프로세스가 CPU 사용시간이 짧은 여러 프로세스를 오래 대기시킬 수 있으므로
// 처리율이 떨어질 수 있다는 단점이 있다.

// - 스케줄링 기법 종류
// 1) SJF(Shortest Job First) 스케줄링 기법(비선점 방식)
// 평균 대기시간을 최소화하기 위해 프로세스의 실행시간(CPU 점유 시간)이 가장 적은 프로세스를 먼저 실행시키는 기법
// 실행 시간이 긴 프로세스는 실행 시간이 짧은 프로세스에게 할당 순위가 밀려 연기 상태에 빠질 수 있다는 단점이 있다.
// 2) FIFO(First In First Out) 스케줄링 방식(비선점 방식)
// 프로세서를 요청하는 순서대로 처리하는 방법(선입선출)
// 스케줄링의 이해와 구현이 단순하다.
// 준비 큐에 있는 모든 프로세서가 결국 실행되므로 기아 없는 공정한 정책이다.
// 프로세서가 지속적으로 유용한 프로세스를 수행하여 처리율이 높다.
// 비선점 방식이므로 대화식 프로세스에는 부적합하다.
// 장기 실행 프로세스가 있으면 뒤에 있는 모든 프로세스를 대기시켜 평균 대기 시간이 길어지며, 최악의 대기 시간이 될 수 있다.
// 긴 프로세스가 실행되는 동안 짧은 프로세스가 긴 대기 시간으로 호위 효과가 발생할 수 있다.
// 3) HRN(Highest Response-ratio Next) 스케줄링 방식(비선점 방식)
// 실행시간이 긴 프로세스에 불리한 SJF기법을 보완하기 위한 것으로, 대기시간과 서비스 실행 시간을 이용하는 방식이다.
// 우선순위( == 시스템 응답시간) = (대기시간 + 서비스 실행 시간) / (서비스 실행 시간)
// 우선순위(시스템 응답시간) 값이 큰 것부터 실행하는 방식이다.
// 이렇게 프로세스가 자원을 기다리고 있는 시간에 비례하여 우선순위를 부여함으로써 무한 연기의 문제를 방지하는 것을 '에이징(Aging) 기법'이라고 한다.
// 4) RR(Round Robin) 스케줄링 방식(선점 방식)
// 프로세스들 사이에 우선순위를 두지 않고, 순서대로 시간 단위로 CPU를 할당하는 방식이다.
// 보통 시간 단위는 10ms ~ 100ms 정도이고 시간 단위동안 수행한 프로세스는 준비 큐의 끝으로 밀려나게 된다.
// 문맥 전환의 오버헤드가 큰 반면, 응답시간이 짧아지는 장점이 있어 실시간 시스템에 유리하고, 할당되는 시간이 클 경우 비선점 FIFO 기법과 같아지게 된다.
// 5) 다단계 큐(Multi-level Queue, MQ) 스케줄링 방식(선점 방식)
// 프로세스를 특정 그룹으로 분류할 수 있을 경우 그룹에 따라 각기 다른 준비 상태 큐를 사용하는 기법이다.
// 프로세스가 특정 그룹의 준비 상태 큐에 들어갈 경우 다른 준비 상태 큐로 이동할 수 없다.
// 하위 준비 상태 큐에 있는 프로세스를 실행하는 도중이라도 상위 준비 상태 큐에 프로세스가 들어오면 상위 프로세스에게 CPU를 할당해야 한다.
// <예시>
// - level 1, 2, 3 큐가 있을 때, 레벨 1의 큐가 모두 완료되어야만 레벨 2의 큐로 넘어갈 수 있고, 레벨 2의 큐가 모두 완료되어야 그 다음으로 넘어갈 수 있다.
// 6) SRT(Shortest Remaining Time) 스케줄링 방식(선점 방식)
// 비선점 스케줄링인 SJF 기법을 선점 형태로 변형한 기법이다.
// SJF처럼 CPU 점유 시간이 가장 짧은 프로세스에 CPU를 먼저 할당하는 방식으로,
// SJF와 차이점은 선점 방식으로 바뀌어 중요한 프로세스가 있으면 점유 시간이 길어도 먼저 실행시킬 수 있는 권한이 있다는 것이다.
