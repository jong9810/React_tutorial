// 정규화(Normalization)
// 관계형 데이터베이스의 설계에서 중복을 최소화하게 데이터를 구조화 하는 프로세스를 정규화라고 부른다.
// 데이터베이스 정규화의 목표는 이상이 있는 관계를 재구성하여 작고 잘 조직된 관계를 생성하는 것에 있다.
// 일반적으로 정규화란 크고, 제대로 조직되지 않은 테이블들과 관계들을 작고 잘 조직된  테이블과 관계들로 나누는 것을 포함한다.

// 데이터베이스 정규화의 목적
// 1) 불필요한 데이터(data redundancy)를 제거한다.
// 2) 데이터 저장을 "논리적으로" 한다.

// 데이터베이스 디자인의 표준은 데이터베이스가 완전히 정규화되게 디자인 되어야 한다. 그 뒤 일부는 성능상의 이유로 비정규화될 수 있다.
// 정규화된 결과를 정규형이라고 하며, 정규형은 기본 정규형 고급 정규형으로 나뉜다.
// - 기본 정규형 : 제1정규형, 제2정규형, 제3정규형, BCNF(보이스/코드 정규형)
// - 고급 정규형 : 제4정규형, 제5정규형

// - 정규형 종류
// 1) 제 1정규형(1NF, First Normal Form)
// 테이블의 컬럼이 원자값(Atomic Value, 하나의 값)을 갖도록 테이블을 분해하는 것이다.
// 2) 제 2정규형(2NF, Second Normal Form)
// 제 2정규형란 제 1정규화를 진행한 테이블에 대해 완전 함수 종속을 만족하도록 테이블을 분해하는 것이다.
// 여기서 완전 함수 종속이라는 것은 기본키의 부분집합이 결정자가 되어선 안된다는 것을 의미한다.
// 3) 제 3정규형(3NF, Third Normal Form)
// 제 3정규형란 제 2정규화를 진행한 테이블에 대해 이행적 종속을 없애도록 테이블을 분해하는 것이다.
// 여기서 이행적 종속이라는 것은 A -> B, B -> C가 성립할 때 A -> C가 성립되는 것을 의미한다.
// 4) BCNF(Boyce-Codd Normal Form)
// BCNF란 제 3정규화를 진행한 테이블에 대해 모든 결정자가 후보키가 되도록 테이블을 분해하는 것이다.
// 5) 제 4정규형(4NF, Fourth Normal Form)
// 릴레이션이 BCNF를 만족하면서, 함수 종속이 아닌 다치 종속(MVD: Multi  Valued Dependency)을 제거하면 제 4정규형을 만족할 수 있다.
// 6) 제 5정규형(5NF, Fifth Normal Form)
// 릴레이션이 제 4정규형을 만족하면서 후보키를 통하지 않는 조인 종속(JD: Join Dependency)을 제거하면 제 5정규형을 만족할 수 있다.

// - 원자값(Atomic Value) : 더 이상 분리되지 않는 값을 의미한다. 하나의 레코드에서 각 필드에는 원자값만이 정의될 수 있다.
// - 릴레이션(relation) : 주로 테이블(Table)과 같은 의미로 사용되며, 데이터의 집합을 의미한다. 튜플(tuple)과 속성(attribute)로 구성되어 있다.
// - 속성(Attribute), 필드(Field), 컬럼(Column) : 릴레이션을 구성하는 각 열에 부여되는 이름을 의미한다.
// - 튜플(Tuple), 레코드(Record), 행(Row) : 릴레이션의 각 행을 튜플이라고 하며 하나의 튜플은 각 속성에서 정의된 값들을 이용하여 구성된다.
// - 도메인(Domain) : 각 필드의 가능한 값들의 범위를 미리 정해놓는 것으로 필드가 가질 수 있는 모든 값들의 집합을 의미한다(원자값).
// - 유일성(uniqueness) : 하나의 키로 어떠한 행을 바로 찾아낼 수 있는 능력
// - 최소성(minimality) : 키를 구성하는 속성들 중 가장 최소로 필요한 속성들로만 키를 구성하는 성질

// - 릴레이션 키 종류
// 1) 슈퍼키(Super Key)
// 데이터베이스에서 관계(테이블)의 행을 고유하게 식별할 수 있는 속성 또는 속성의 집합을 말한다.
// 슈퍼 키는 대상관계의 모든 속성이 함수 종속하는 속성의 집합으로 정의할 수 있다.
// 하나 이상의 속성들의 집합으로 이루어진다(유일성은 만족하지만 최소성은 만족하지 않음).
// 2) 후보키(Candidate Key)
// 관계형 데이터베이스의 관계형 모델에서 슈퍼키 중 더 이상 줄일 수 없는(irreducible) 형태를 가진 것을 말한다.
// 기본키로 사용할 수 있는 속성들을 뜻한다(유일성, 최소성을 가짐).
// 릴레이션에 있는 속성들 중에서도 튜플(행)들을 식별해낼 수 있는 속성을 말한다.
// 3) 기본키(Primary Key, PK)
// 후보키 중에서 특별히 선정된 키로 중복된 값을 가질 수 없으며, 후보키의 성질을 갖는다(유일성, 최소성을 가짐).
// 4) 대체키(Surrogate key)
// 후보키가 두 개 이상일 경우, 기본키를 제외하고 남은 후보키들을 말한다.
// 5) 외래키(Foreign Key, FK)
// 하나(또는 여러개)의 다른 릴레이션의 기본키(PK) 필드를 참조하는 데이터의 참조 무결성(Referential integrity)을 확인하기 위해 사용되는 키(Key)를 의미한다.

// - 결정자
// 다른 속성의 값을 고유하게 결정할 수 있는 속성을 결정자라고 한다.
// 결정자는 주어진 릴레이션에서 다른 속성을 고유하게 결정하는 하나 이상의 속성을 의미한다.
// 결정자는 키 속성이거나 아닐수도 있고, 복합 속성일 수도 있다.
// 예시) 속성 A가 속성 B를 결정하는 결정자라고 한다면 A -> B로 표현함.

// - 함수적 종속성(Functional Dependency, FD)
// Database에서는 A라는 릴레이션이 B라는 데이터에 영향을 끼치는 현상을 의미한다.
// 만일 속성 A가 속성 B의 결정자이면 B가 A에 함수적으로 종속한다고 표현한다. 이때 B는 A의 종속자라고 표현한다(A -> B).

// - 함수적 종속의 종류
// 1) 완전 함수 종속(Full Functional Dependency)
// 종속자가 기본키에만 종속되며, 기본키가 여러 속성으로 구성되어 있을 경우 기본키를 구성하는 모든 속성이 포함된 기본키의 부분집합에 종속된 경우이다.
// 즉, 종속자가 기본키의 모든 속성을 알아야만 결정되는 경우 종속자는 기본키(결정자)에 완전 함수 종속된 관계라고 표현한다.
// 2) 부분 함수 종속(Partial Functional Dependency)
// 릴레이션에서 종속자가 기본키가 아닌 다른 속성에 종속되거나, 기본키가 여러 속성으로 구성되어 있을경우 기본키를 구성하는 속성 중 일부만 종속되는 경우이다.
// 즉, 종속자가 기본키 중 일부만 알아도 결정되는 경우 종속자는 기본키에 부분 함수 종속된 관계라고 표현한다.
// 3) 이행적 함수 종속(Transitive Functional Dependency)
// 릴레이션에서 X, Y, Z라는 3 개의 속성이 있을 때 X -> Y, Y -> Z 이란 종속 관계가 있을 경우, X -> Z가 성립될 때 이행적 함수 종속이라고 힌다.
// 즉, X를 알면 Y를 알고 그를 통해 Z를 알 수 있는 경우를 말한다.

// - 다치 종속(or 다중값 종속, Multi-valued Dependency, MVD)
// 릴레이션 내의 두 어트리뷰트 집합 사이 성립하는 제약조건 중의 하나이다.
// 함수 종속과 달리 다치 종속은 어떠한 조건을 만족하는 튜플이 릴레이션 안에 있을 것을 요구한다.
// 그러므로 다치 종속은 튜플이 만들어내는 "종속" 중의 한 종류로 분류할 수 있다.

// - 조인 종속(Join Dependency, JD)
// 테이블을 분해한 결과를 다시 조인했을 때 원래의 테이블과 동일하게 복원되는 제약조건이다.
// 조인 종속성은 다치 종속의 개념을 더 일반화한 것이다.
