//-------------------------------------------------------------------------------------------------------------------------------------------------

// 프로그래밍 팁
// 남의 코드를 가져올 때 <script> 태그에 src="코드 경로"로 불러온다.

// 코드를 가장 깔끔하게 짜는 방법은 안 짜는 것이다(프로그래밍계의 속담).
// ex) this(클래스 컴포넌트)가 어렵기 때문에 this를 안 쓰는 방법(함수 컴포넌트)이 나온 것이다.
// React로 만들지 않은 사이트도 React로 만들 수 있을 정도가 되려면 state 찾는 훈련을 해야한다.

// React 감 잡는 훈련!!!
// 아무 웹 사이트를 켜고 그 사이트에서 state가 무엇일지 찾아보기
// 더 나아가서 찾은 state가 어떤 데이터 타입일지 상상해보기
// ex) 로그인 state : boolean(true==로그인 함, false==로그인 안 함)

// CSS로 구현할 수 있으면 CSS로 하고, 그게 어려울 경우 state를 사용해서 구현하는 게 좋다.

//-------------------------------------------------------------------------------------------------------------------------------------------------

// REACT
// React 자체는 라이브러리이지만, React 생태계를 통틀어서는 프레임워크가 맞다.
// React는 state가 바뀌면 어딘가에 저장되어 있는 데이터가 화면에 보이게 한다.

// React 사용 목적
// React는 자바스크립트이다.
// React는 데이터 중심으로 움직인다.
// React의 주 목적은 데이터와 화면을 일치시키는 것이다(데이터 바뀜 -> 화면 자동으로 바뀜).

// React 주의사항
// React에서는 기존 html 태그는 소문자로, 사용자가 만든 컴포넌트는 대문자로 시작해야한다.
// React에서는 닫는 태그를 작성하지 않으면 에러가 발생한다.
// 문자열은 ""로, 자바스크립트 코드는 {}로 묶어주어야 한다.
// 반환하는 값이 여러 줄일 경우 소괄호로 묶어준다(return (값);).
// return에는 태그가 하나만 와야 한다(여러 개 태그 반환하는 경우에는 <></>(fragment)로 묶어주면 됨).
// react에서는 스테이트 객체를 함부로 바꾸지 말고 복사해서 수정해야 한다(불변성).
// ex)
// this.state.liked = true; // (X)
// this.setState({liked: true}); // (O) : 스테이트를 수정하는 방법(setState 메서드)

// pop, push, shift, unshift, splice -> 배열을 직접적으로 수정(불변성을 훼손시킴)
// splice, concat -> 새로운 배열을 만들어냄(불변성을 훼손시키지 않음)

// JavaScript : 화면이 어떻게 바뀔지 상상 -> 화면에 있는 데이터 자바스크립트로 바꿔주기
// React : 데이터가 어떻게 바뀔지 상상 -> 화면을 바꿔주기

// React 구성요소
// 컴포넌트(component) : 데이터와 화면을 하나로 묶어놓은 것(사용자 정의 태그).
// 스테이트(state) : 데이터(화면의 바뀔 부분을 스테이트로 만들어 주면 됨).
// 화면(screen) : render의 return 부분.

// React 방식(class, function)
// react를 사용하는 방법은 함수 방식과 클래스 방식으로 두 가지이다.
// 클래스 방식은 ErrorBoundary에서만 사용되고 거의 사용되지 않는다.

// 클래스 컴포넌트 : 코드를 읽을 수 있을 정도만 익히면 된다.

// 함수 컴포넌트
// React.useState() 메서드를 사용하여 스테이트를 정의하고 수정한다.
// ex) const [liked, setLiked] = React.useState(false);
// 함수 컴포넌트도 클래스 컴포넌트와 비슷하게 return 한 값이 화면에 표시됨.
// 함수 컴포넌트를 사용하면 this를 사용하지 않아도 돼서 헷갈릴 일이 없다(함수 컴포넌트 장점).
//

// ErrorBoundary : https://velog.io/@bbaa3218/React-%EC%97%90%EB%9F%AC-%EB%B0%94%EC%9A%B4%EB%8D%94%EB%A6%ACError-Boundary

// 코드
// ReactDOM.render(<LikeButton />, document.querySelector('#root')); // React 17버전 코드
// ReactDOM.createRoot(document.querySelector('#root')).render(<LikeButton />); // React 18버전 코드

// {this.state.liked ? 'Liked' : 'Like!'} // 조건문 대신 삼항 연산자를 사용
// {[1,2,3].map((i)=>{return <div>i<div>;})} // 반복문 대신 배열 map 메서드를 사용

// const [liked, setLiked] = React.useState(false); // 구조분해 할당
// 위 한줄 코드와 아래 두 줄 코드는 완전히 같은 코드이다(반드시 배열로 할당해야함).
// const liked = React.useState(false)[0]; // state
// const setLiked = React.useState(false)[1]; // state를 바꾸는 함수

// React Developer Tools
// 개발자 도구에 Components, Profiler 탭이 생김.
// Components 탭 : 컴포넌트와 스테이트를 확일할 때 사용
// Profiler 탭 : 성능 문제를 해결할 때 사용

//-------------------------------------------------------------------------------------------------------------------------------------------------

// JSX

// JavaScript + XML -> 자바스크립트이지만 형태는 html과 비슷한 문법

// 기존의 React.createElement() 대신에 html의 태그 문법으로 작성한다.

//-------------------------------------------------------------------------------------------------------------------------------------------------

// Babel 라이브러리

// JSX를 만나면 React.createElement()로 바꿔줌.

// babel 라이브러리 불러오기
// 1) <head> 태그에 아래 코드 추가.
// <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
// 2) babel 라이브러리 적용할 <script> 태그에 아래와 같이 type 속성 적용.
// <script type="text/babel">

//-------------------------------------------------------------------------------------------------------------------------------------------------
